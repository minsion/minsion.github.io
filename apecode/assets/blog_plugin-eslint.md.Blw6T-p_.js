import{_ as s,c as i,o as a,a9 as t}from"./chunks/framework.bq0jHAD3.js";const u=JSON.parse('{"title":"ESLint 语法检验工具的使用","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"blog/plugin-eslint.md","filePath":"blog/plugin-eslint.md","lastUpdated":null}'),n={name:"blog/plugin-eslint.md"},l=t(`<h1 id="eslint-语法检验工具的使用" tabindex="-1">ESLint 语法检验工具的使用 <a class="header-anchor" href="#eslint-语法检验工具的使用" aria-label="Permalink to &quot;ESLint 语法检验工具的使用&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在计算机科学中，lint 是一种工具的名称，它用来标记代码中，某些可疑的、不具结构性（可能造成 bug）的语句。它是一种静态程序分析工具，最早适用于 C 语言，在 UNIX 平台上开发出来。后来它成为通用术语，可用于描述在任何一种编程语言中，用来标记代码中有疑义语句的工具。今天介绍到的 ESLint，便是 JavaScript 20 多年的发展历程中主流程序分析工具之一。</p><h2 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLint&quot;">​</a></h2><p>ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。在许多方面，它和 JSLint、JSHint 相似，除了少数的例外。</p><ul><li>ESLint 使用 Espree 解析 JavaScript。</li><li>ESLint 使用 AST（抽象语法树） 去分析代码中的模式。</li><li>ESLint 拥有丰富的 rules 规则，并支持自定义 rules。</li><li>ESLint 是完全插件化的。每一个规则都是一个插件并且你可以在运行时添加更多的规则。</li></ul><h2 id="一、安装" tabindex="-1">一、安装 <a class="header-anchor" href="#一、安装" aria-label="Permalink to &quot;一、安装&quot;">​</a></h2><h3 id="_1-cmd-命令式安装" tabindex="-1">1. cmd 命令式安装 <a class="header-anchor" href="#_1-cmd-命令式安装" aria-label="Permalink to &quot;1. cmd 命令式安装&quot;">​</a></h3><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## 安装 eslint 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install eslint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## 设置配置文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./node_modules/.bin/eslint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">init</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## 运行ESLint</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./node_modules/.bin/eslint yourfile.js</span></span></code></pre></div><h3 id="_2-编辑器式安装" tabindex="-1">2. 编辑器式安装 <a class="header-anchor" href="#_2-编辑器式安装" aria-label="Permalink to &quot;2. 编辑器式安装&quot;">​</a></h3><p>打开 Vscode，找到扩展中心，搜索安装 eslint 插件即可。</p><h2 id="二、配置方式" tabindex="-1">二、配置方式 <a class="header-anchor" href="#二、配置方式" aria-label="Permalink to &quot;二、配置方式&quot;">​</a></h2><p>ESlint 被设计为完全可配置的，这意味着可以关闭每一个规则而只运行基本语法验证，或混合和匹配 ESLint 默认绑定的规则和自定义规则。有两种主要的方式来配置 ESLint：</p><ul><li>Configuration Comments： 使用 JavaScript 注释把配置信息直接嵌入到一个代码源文件中。</li><li>Configuration Files： 使用 JavaScript、JSON 或者 YAML 文件为整个目录（处理你的主目录）和它的子目录指定配置信息。可以配置一个独立的 .eslintrc.* 文件，或者直接在 package.json 文件里的 eslintConfig 字段指定配置，ESLint 会查找和自动读取它们，再者，可以在命令行运行时指定一个任意的配置文件。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置文件优先级</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configFilenames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;.eslintrc.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;.eslintrc.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;.eslintrc.yml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;.eslintrc.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;.eslintrc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><h3 id="_1-配置对象" tabindex="-1">1. 配置对象 <a class="header-anchor" href="#_1-配置对象" aria-label="Permalink to &quot;1. 配置对象&quot;">​</a></h3><ul><li>Environments： 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。</li><li>Globals： 脚本在执行期间访问的额外的全局变量。</li><li>Rules： 启用的规则及其各自的错误级别。</li></ul><h3 id="_2-指定解析器选项-parseroptions" tabindex="-1">2. 指定解析器选项 parserOptions <a class="header-anchor" href="#_2-指定解析器选项-parseroptions" aria-label="Permalink to &quot;2. 指定解析器选项 parserOptions&quot;">​</a></h3><p>ESLint 允许你指定想要支持的 JavaScript 语言选项。默认情况下，ESLint 支持 ECMAScript 5 语法。当然，如果需要可以覆盖默认设置，以启用对其他 ECMAScript 版本或 JSX 的支持。</p><p>关于解析器选项可以在 <code>.eslintrc.*</code> 文件中使用 <code>parserOptions</code> 属性设置。配置选项如下：</p><ul><li>ecmaVersion：默认设置 3，5 ECMAScript 版本，可以使用 6、7、8、9、10 来指定需要使用的 ECMAScript 版本，当然使用对应的年份版本号也是可以的，如 6 对应 2015。</li><li>sourceType：设置为 &quot;script&quot; (默认) 或 &quot;module&quot;（如果你的代码是 ECMAScript 模块)。</li><li>ecmaFeatures： 这是个对象，表示想使用的额外的语言特性： <ul><li>globalReturn：允许在全局作用域下使用 return 语句</li><li>impliedStrict：启用全局 strict mode (如果 ecmaVersion 是 5 或更高)</li><li>jsx：启用 JSX</li><li>experimentalObjectRestSpread：启用实验性的 object rest/spread properties 支持。</li></ul></li></ul><h3 id="_3-规则定义-rules" tabindex="-1">3. 规则定义 rules <a class="header-anchor" href="#_3-规则定义-rules" aria-label="Permalink to &quot;3. 规则定义 rules&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义规则部分</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;always&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用分号结束</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;quotes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;double&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用双引号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中，&quot;semi&quot;和&quot;quotes&quot;是 ESLint 中规则的名称，规则中的第一个值是指错误级别。</p><p>这三个错误级别可以允许细粒度的控制 ESLint 是如何应用规则：</p><table><thead><tr><th style="text-align:center;">错误级别</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>off</strong> or <strong>0</strong></td><td style="text-align:center;">关闭规则</td></tr><tr><td style="text-align:center;"><strong>warn</strong> or <strong>1</strong></td><td style="text-align:center;">将规则视为一个警告（不会影响退出码）</td></tr><tr><td style="text-align:center;"><strong>error</strong> or <strong>2</strong></td><td style="text-align:center;">将规则视为一个错误（退出码为 1）</td></tr></tbody></table><h3 id="_4-eslintrc-json-示例" tabindex="-1">4. .eslintrc.json 示例 <a class="header-anchor" href="#_4-eslintrc-json-示例" aria-label="Permalink to &quot;4. .eslintrc.json 示例&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;parserOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ecmaVersion&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sourceType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ecmaFeatures&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;always&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;quotes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>配置文件传送门：<a href="http://eslint.cn/docs/user-guide/configuring" target="_blank" rel="noreferrer">configuring 配置文件</a></p><h2 id="三、规则页面" tabindex="-1">三、规则页面 <a class="header-anchor" href="#三、规则页面" aria-label="Permalink to &quot;三、规则页面&quot;">​</a></h2><p>为了对规则有更好的理解，ESLint 对其进行了分门别类。</p><p>所有的规则默认都是禁用的。在配置文件中，使用 &quot;extends&quot;: &quot;eslint:recommended&quot; 来启用推荐的规则，报告一些常见的问题，在下文中这些推荐的规则都带有一个 ✔ 标记。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint:recommended&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 开启规则页面中 ✔ 的规则</span></span></code></pre></div><p>规则分类主要有以下：</p><ul><li>Possible Errors：这些规则与 JavaScript 代码中可能的错误或逻辑错误有关。</li><li>Best Practices：这些规则是关于最佳实践的，帮助避免一些问题。</li><li>Strict Mode：该规则与使用严格模式和严格模式指令有关。</li><li>Variables：这些规则与变量声明有关。</li><li>Node.js and CommonJS：这些规则是关于 Node.js 或 在浏览器中使用 CommonJS 的。</li><li>Stylistic Issues：这些规则是关于风格指南的，而且是非常主观的。</li><li>ECMAScript 6：这些规则只与 ES6 有关, 即通常所说的 ES2015。</li><li>Deprecated</li><li>Removed：来自旧版本的 eslint（在弃用策略之前）的这些规则已被较新规则替换。</li></ul><p>规则页面传送门：<a href="http://eslint.cn/docs/rules/" target="_blank" rel="noreferrer">Rules 规则页面</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>以上便是今天介绍到的 ESLint 相关的全部内容，通过配置信息或者配置文件能够实现对 JavaScript 语法进行检测，对于 eslint 中内置的 rules 规则可以到官网中阅读详细内容。</p><br><br><br><p><code>最后，如果您有更好的方法，欢迎在留言区中分享；或者实际操作中遇到什么问题均可留言或者私信我，感谢您的观看！</code> 官方文档：<a href="http://eslint.cn/" target="_blank" rel="noreferrer">ESLint</a></p>`,42),e=[l];function p(h,r,k,o,d,E){return a(),i("div",null,e)}const g=s(n,[["render",p]]);export{u as __pageData,g as default};
