import{_ as t,c as e,o as a,a9 as i}from"./chunks/framework.bq0jHAD3.js";const k=JSON.parse('{"title":"Prettier 一个固执的代码格式化程序","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"blog/plugin-prettier.md","filePath":"blog/plugin-prettier.md","lastUpdated":null}'),s={name:"blog/plugin-prettier.md"},l=i(`<h1 id="prettier-一个固执的代码格式化程序" tabindex="-1">Prettier 一个固执的代码格式化程序 <a class="header-anchor" href="#prettier-一个固执的代码格式化程序" aria-label="Permalink to &quot;Prettier 一个固执的代码格式化程序&quot;">​</a></h1><h2 id="prettier" tabindex="-1">Prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;Prettier&quot;">​</a></h2><p>Prettier 是一个“有态度”的代码格式化工具，它支持：JavaScript （包括实验性功能）、JSX、Angular、Vue、Flow、TypeScript、CSS、Less 和 SCSS、HTML、JSON、GraphQL、Markdown，包括 GFM 和 MDX、YAML</p><ul><li>An <code>opinionated</code> code formatter</li><li>Supports many languages</li><li>Integrates with most editors</li><li>Has few options</li></ul><p>它移除了所有原始样式* 并确保输出的所有代码都符合一致的样式。</p><h2 id="一、安装" tabindex="-1">一、安装 <a class="header-anchor" href="#一、安装" aria-label="Permalink to &quot;一、安装&quot;">​</a></h2><h3 id="npm-或-yarn" tabindex="-1">npm 或 yarn <a class="header-anchor" href="#npm-或-yarn" aria-label="Permalink to &quot;npm 或 yarn&quot;">​</a></h3><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## npm</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exact prettier</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## yarn</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yarn </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exact prettier</span></span></code></pre></div><p>在目录结构需要新建的文件 .prettierrc.json - 定义 prettier 相关配置文件。 .prettierignore - 设置不进行 prettier 格式化的文件。</p><h2 id="二、配置文件" tabindex="-1">二、配置文件 <a class="header-anchor" href="#二、配置文件" aria-label="Permalink to &quot;二、配置文件&quot;">​</a></h2><p>Prettier uses cosmiconfig for configuration file support. This means you can configure Prettier via (in order of precedence):</p><ul><li>A &quot;prettier&quot; key in your package.json file.</li><li>A .prettierrc file written in JSON or YAML.</li><li>A .prettierrc.json, .prettierrc.yml, .prettierrc.yaml, or .prettierrc.json5 file.</li><li>A .prettierrc.js, .prettierrc.cjs, prettier.config.js, or prettier.config.cjs file that exports an object using module.exports.</li><li>A .prettierrc.toml file.</li></ul><p>json：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;trailingComma&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tabWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;singleQuote&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>javascript：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// prettier.config.js or .prettierrc.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  trailingComma: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tabWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  semi: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  singleQuote: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>yaml：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## .prettierrc or .prettierrc.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">trailingComma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es5&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tabWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">semi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">singleQuote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>toml：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## .prettierrc.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trailingComma = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es5&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tabWidth = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">semi = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">singleQuote = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="三、配置参数" tabindex="-1">三、配置参数 <a class="header-anchor" href="#三、配置参数" aria-label="Permalink to &quot;三、配置参数&quot;">​</a></h2><h3 id="_1-print-width" tabindex="-1">1. Print Width <a class="header-anchor" href="#_1-print-width" aria-label="Permalink to &quot;1. Print Width&quot;">​</a></h3><p>指定行字符串显示长度。</p><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">80</td><td style="text-align:center;">--print-width &lt;int&gt;</td><td style="text-align:center;">printWidth: &lt;int&gt;</td></tr></tbody></table><h3 id="_2-tab-width" tabindex="-1">2. Tab Width <a class="header-anchor" href="#_2-tab-width" aria-label="Permalink to &quot;2. Tab Width&quot;">​</a></h3><p>指定每个缩进级别的空格数。</p><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">2</td><td style="text-align:center;">--tab-width &lt;int&gt;</td><td style="text-align:center;">tabWidth: &lt;int&gt;</td></tr></tbody></table><h3 id="_3-tabs" tabindex="-1">3. Tabs <a class="header-anchor" href="#_3-tabs" aria-label="Permalink to &quot;3. Tabs&quot;">​</a></h3><p>带有标签而不是空格的缩进线。</p><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">false</td><td style="text-align:center;">--use-tabs</td><td style="text-align:center;">useTabs: &lt;bool&gt;</td></tr></tbody></table><h3 id="_4-semicolons" tabindex="-1">4. Semicolons <a class="header-anchor" href="#_4-semicolons" aria-label="Permalink to &quot;4. Semicolons&quot;">​</a></h3><p>在语句的末尾打印分号。</p><p>可选项：</p><ul><li>true - 在每个语句的末尾添加分号。</li><li>false - 仅在可能介绍 ASI 故障的行开头时添加分号。</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">true</td><td style="text-align:center;">--no-semi</td><td style="text-align:center;">semi: &lt;bool&gt;</td></tr></tbody></table><h3 id="_5-quotes" tabindex="-1">5. Quotes <a class="header-anchor" href="#_5-quotes" aria-label="Permalink to &quot;5. Quotes&quot;">​</a></h3><p>使用单引号而不是双引号。</p><p>笔记：</p><ul><li>JSX 引号忽略此选项。</li><li>If the number of quotes outweighs the other quote, the quote which is less used will be used to format the string - Example: &quot;I&#39;m double quoted&quot; results in &quot;I&#39;m double quoted&quot; and &quot;This &quot;example&quot; is single quoted&quot; results in &#39;This &quot;example&quot; is single quoted&#39;.</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">false</td><td style="text-align:center;">--single-quote</td><td style="text-align:center;">singleQuote: &lt;bool&gt;</td></tr></tbody></table><h3 id="_6-quote-props" tabindex="-1">6. Quote Props <a class="header-anchor" href="#_6-quote-props" aria-label="Permalink to &quot;6. Quote Props&quot;">​</a></h3><p>引用对象中属性时更改。</p><p>可选项：</p><ul><li>&quot;as-needed&quot; - 仅在必需的对象属性周围添加引号。</li><li>&quot;consistent&quot; - 如果对象中的至少一个属性需要引号，请引用所有属性。</li><li>&quot;preserve&quot; - 尊重对象属性中引号的输入使用。</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">&quot;as-needed&quot;</td><td style="text-align:center;">--quote-props &lt;as-needed/consistent/preserve&gt;</td><td style="text-align:center;">quoteProps: &quot;&lt;as-needed/consistent/preserve&gt;&quot;</td></tr></tbody></table><h3 id="_7-jsx-quotes" tabindex="-1">7. JSX Quotes <a class="header-anchor" href="#_7-jsx-quotes" aria-label="Permalink to &quot;7. JSX Quotes&quot;">​</a></h3><p>使用单引号而不是 JSX 中的双引号。</p><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">false</td><td style="text-align:center;">--jsx-single-quote</td><td style="text-align:center;">jsxSingleQuote: &lt;bool&gt;</td></tr></tbody></table><h3 id="_8-trailing-commas" tabindex="-1">8. Trailing Commas <a class="header-anchor" href="#_8-trailing-commas" aria-label="Permalink to &quot;8. Trailing Commas&quot;">​</a></h3><p>在可能的多线逗号分离的语法结构中打印尾随逗号。 （例如单行阵列，例如，从未获得尾随逗号。）</p><p>可选项： &quot;es5&quot; - 在 ES5（对象，阵列等）有效的尾随逗号。 在键盘中的类型参数中没有尾随逗号。 &quot;none&quot; - 没有尾随逗号。 &quot;all&quot; - 尽可能尾随逗号（包括函数参数和呼叫）。 要运行，格式化的 JavaScript 代码需要一种支持 ES2017（Node.js 8+或现代浏览器）或下级编译的引擎。 这也使得在 CypeScript 中的类型参数中可以实现尾随逗号（自 2018 年 1 月发布版本 2.7 以来支持。</p><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">&quot;es5&quot;</td><td style="text-align:center;">--trailing-comma &lt;es5/none/all&gt;</td><td style="text-align:center;">trailingComma: &quot;&lt;es5/none/all&gt;&quot;</td></tr></tbody></table><h3 id="_9-bracket-spacing" tabindex="-1">9. Bracket Spacing <a class="header-anchor" href="#_9-bracket-spacing" aria-label="Permalink to &quot;9. Bracket Spacing&quot;">​</a></h3><p>在对象文字中的括号之间打印空格。</p><p>可选项：</p><ul><li>true - Example: { foo: bar }.</li><li>false - Example: {foo: bar}.</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">true</td><td style="text-align:center;">--no-bracket-spacing</td><td style="text-align:center;">bracketSpacing: &lt;bool&gt;</td></tr></tbody></table><h3 id="_10-jsx-brackets" tabindex="-1">10. JSX Brackets <a class="header-anchor" href="#_10-jsx-brackets" aria-label="Permalink to &quot;10. JSX Brackets&quot;">​</a></h3><p>在最后一行末尾的多行 JSX 元素中放置一个多行 JSX 元素，而不是单行在下一行（不适用于自闭元素）。</p><p>可选项：</p><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">false</td><td style="text-align:center;">--jsx-bracket-same-line</td><td style="text-align:center;">jsxBracketSameLine: &lt;bool&gt;</td></tr></tbody></table><h3 id="_11-arrow-function-parentheses" tabindex="-1">11. Arrow Function Parentheses <a class="header-anchor" href="#_11-arrow-function-parentheses" aria-label="Permalink to &quot;11. Arrow Function Parentheses&quot;">​</a></h3><p>在唯一箭头函数参数周围包含括号。</p><ul><li>&quot;always&quot; - 总是包括 Parens。 例子: (x) =&gt; x</li><li>&quot;avoid&quot; - 尽可能省略镜子。 例子: x =&gt; x</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">&quot;always&quot;</td><td style="text-align:center;">--arrow-parens &lt;always/avoid&gt;</td><td style="text-align:center;">arrowParens: &quot;&lt;always/avoid&gt;&quot;</td></tr></tbody></table><p>乍一看，由于视觉噪音较小，避免括号可能看起来更好的选择。 但是，当 prettier 删除括号时，它变得越难添加类型注释，额外的参数或默认值以及制定其他更改。 一致使用括号在编辑真实代码库时提供更好的开发人员体验，这证明了选项的默认值。</p><h3 id="_12-range" tabindex="-1">12. Range <a class="header-anchor" href="#_12-range" aria-label="Permalink to &quot;12. Range&quot;">​</a></h3><p>格式化文件的段。</p><p>这两个选项可用于格式化启动和结束在给定的字符偏移（分别包含和独占）的代码。 该范围将扩展：</p><ul><li>向后到包含所选语句的第一行的开始。</li><li>转发到所选语句的末尾。</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">--range-start &lt;int&gt;</td><td style="text-align:center;">rangeStart: &lt;int&gt;</td></tr><tr><td style="text-align:center;">Infinity</td><td style="text-align:center;">--range-end &lt;int&gt;</td><td style="text-align:center;">rangeEnd: &lt;int&gt;</td></tr></tbody></table><h3 id="_13-parser" tabindex="-1">13. Parser <a class="header-anchor" href="#_13-parser" aria-label="Permalink to &quot;13. Parser&quot;">​</a></h3><p>指定要使用的解析器。</p><p>Babel 和 Flow 解析器都支持相同的 JavaScript 功能（包括流型注释）。 它们可能在某些边缘案例中有所不同，因此如果您遇到其中一个，您可以尝试尝试流量而不是 Babel。 几乎相同适用于打字和 Babel-TS。 BABEL-TS 可能支持类型签名尚未支持的 JavaScript 功能（提议），但是当涉及到无效的代码和比 TypeScript 解析器的战斗测试较少时，它不太宽松。</p><p>可选项：</p><ul><li>&quot;babel&quot; (via @babel/parser) Named &quot;babylon&quot; until v1.16.0</li><li>&quot;babel-flow&quot; (same as &quot;babel&quot; but enables Flow parsing explicitly to avoid ambiguity) First available in v1.16.0</li><li>&quot;babel-ts&quot; (similar to &quot;typescript&quot; but uses Babel and its TypeScript plugin) First available in v2.0.0</li><li>&quot;flow&quot; (via flow-parser)</li><li>&quot;typescript&quot; (via @typescript-eslint/typescript-estree) First available in v1.4.0</li><li>&quot;espree&quot; (via espree) First available in v2.2.0</li><li>&quot;meriyah&quot; (via meriyah) First available in v2.2.0</li><li>&quot;css&quot; (via postcss-scss and postcss-less, autodetects which to use) First available in v1.7.1</li><li>&quot;scss&quot; (same parsers as &quot;css&quot;, prefers postcss-scss) First available in v1.7.1</li><li>&quot;less&quot; (same parsers as &quot;css&quot;, prefers postcss-less) First available in v1.7.1</li><li>&quot;json&quot; (via @babel/parser parseExpression) First available in v1.5.0</li><li>&quot;json5&quot; (same parser as &quot;json&quot;, but outputs as json5) First available in v1.13.0</li><li>&quot;json-stringify&quot; (same parser as &quot;json&quot;, but outputs like JSON.stringify) First available in v1.13.0</li><li>&quot;graphql&quot; (via graphql/language) First available in v1.5.0</li><li>&quot;markdown&quot; (via remark-parse) First available in v1.8.0</li><li>&quot;mdx&quot; (via remark-parse and @mdx-js/mdx) First available in v1.15.0</li><li>&quot;html&quot; (via angular-html-parser) First available in 1.15.0</li><li>&quot;vue&quot; (same parser as &quot;html&quot;, but also formats vue-specific syntax) First available in 1.10.0</li><li>&quot;angular&quot; (same parser as &quot;html&quot;, but also formats angular-specific syntax via angular-estree-parser) First available in 1.15.0</li><li>&quot;lwc&quot; (same parser as &quot;html&quot;, but also formats LWC-specific syntax for unquoted template attributes) First available in 1.17.0</li><li>&quot;yaml&quot; (via yaml and yaml-unist-parser) First available in 1.14.0</li></ul><p>也支持自定义解析器。 首先在 v1.5.0 中提供</p><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">None --parser &lt;string&gt;</td><td style="text-align:center;">--parser ./my-parser parser: &quot;&lt;string&gt;&quot;</td><td style="text-align:center;">parser: require(&quot;./my-parser&quot;)</td></tr></tbody></table><h3 id="_14-file-path" tabindex="-1">14. File Path <a class="header-anchor" href="#_14-file-path" aria-label="Permalink to &quot;14. File Path&quot;">​</a></h3><p>指定要用于推断要使用的解析器的文件名。</p><p>例如，以下将使用 CSS 解析器：</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat foo | prettier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filepath foo.css</span></span></code></pre></div><p>此选项仅在 CLI 和 API 中有用。 在配置文件中使用它没有意义。</p><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">None</td><td style="text-align:center;">--stdin-filepath &lt;string&gt;</td><td style="text-align:center;">filepath: &quot;&lt;string&gt;&quot;</td></tr></tbody></table><h3 id="_15-require-pragma" tabindex="-1">15. Require Pragma <a class="header-anchor" href="#_15-require-pragma" aria-label="Permalink to &quot;15. Require Pragma&quot;">​</a></h3><p>prettier 可以仅限于文件顶部的仅格式化包含特殊注释的文件，该文件称为 Pragma。 当逐渐过渡到 prettier 的大型未格式化的码布时，这非常有用。</p><p>当提供 - 重新查询 - Pragma 时，将格式化以下内容作为其第一个注释的文件：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@prettier</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><p>or</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@format</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">false</td><td style="text-align:center;">--require-pragma</td><td style="text-align:center;">requirePragma: &lt;bool&gt;</td></tr></tbody></table><h3 id="_16-insert-pragma" tabindex="-1">16. Insert Pragma <a class="header-anchor" href="#_16-insert-pragma" aria-label="Permalink to &quot;16. Insert Pragma&quot;">​</a></h3><p>prettier 可以在文件顶部插入特殊的@Format 标记，指定文件已格式化文件。 与 - 重新核心 - Pragma 选项一起使用时，这会很好。 如果文件顶部已有 DocBlock，则此选项将使用@Format 标记添加换行符。</p><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">false</td><td style="text-align:center;">--insert-pragma</td><td style="text-align:center;">insertPragma: &lt;bool&gt;</td></tr></tbody></table><h3 id="_17-prose-wrap" tabindex="-1">17. Prose Wrap <a class="header-anchor" href="#_17-prose-wrap" aria-label="Permalink to &quot;17. Prose Wrap&quot;">​</a></h3><p>默认情况下，更 prettier 的将包装 Markdown 文本，因为某些服务使用 Linebreak 敏感渲染器，例如， github 评论和 bitbucket。 在某些情况下，您可能希望依赖 Editor / Viewer 软包装，因此此选项允许您选择“永远不会”。</p><p>可选项：</p><ul><li>&quot;always&quot; - 包装散文如果超过打印宽度。</li><li>&quot;never&quot; - 不包散文。</li><li>&quot;preserve&quot; - 包裹散文如此。 首先在 v1.9.0 中提供</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">&quot;preserve&quot;</td><td style="text-align:center;">--prose-wrap &lt;always/never/preserve&gt;</td><td style="text-align:center;">proseWrap: &quot;&lt;always/never/preserve&gt;&quot;</td></tr></tbody></table><h3 id="_18-html-whitespace-sensitivity" tabindex="-1">18. HTML Whitespace Sensitivity <a class="header-anchor" href="#_18-html-whitespace-sensitivity" aria-label="Permalink to &quot;18. HTML Whitespace Sensitivity&quot;">​</a></h3><p>为 HTML，Vue，Angular 和 Suppherbars 指定全局空白的灵敏度。 请参阅空白敏感格式以获取更多信息。</p><p>可选项：</p><ul><li>&quot;css&quot; - 尊重 CSS 显示属性的默认值。 对于处理与严格相同的把手。</li><li>&quot;strict&quot; - 所有标签周围的空白（或缺乏）被认为是显着的。</li><li>&quot;ignore&quot; - 所有标签周围的空格（或缺乏）被认为是微不足道的。</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">&quot;css&quot;</td><td style="text-align:center;">--html-whitespace-sensitivity &lt;css/strict/ignore&gt;</td><td style="text-align:center;">htmlWhitespaceSensitivity: &quot;&lt;css/strict/ignore&gt;&quot;</td></tr></tbody></table><h3 id="_19-vue-files-script-and-style-tags-indentation" tabindex="-1">19. Vue files script and style tags indentation <a class="header-anchor" href="#_19-vue-files-script-and-style-tags-indentation" aria-label="Permalink to &quot;19. Vue files script and style tags indentation&quot;">​</a></h3><p>是否要在 VUE 文件中缩进 &lt;script&gt; 和 &lt;style&gt; 标记中的代码。 有些人（如 Vue 的创建者）不归于挽救缩进级别，但这可能会在编辑器中打破代码折叠。</p><ul><li>&quot;false&quot; - 不要在 VUE 文件中缩进脚本和样式标记。</li><li>&quot;true&quot; - Indent script and style tags in Vue files.</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">false</td><td style="text-align:center;">--vue-indent-script-and-style</td><td style="text-align:center;">vueIndentScriptAndStyle: &lt;bool&gt;</td></tr></tbody></table><h3 id="_20-end-of-line" tabindex="-1">20. End of Line <a class="header-anchor" href="#_20-end-of-line" aria-label="Permalink to &quot;20. End of Line&quot;">​</a></h3><p>所有操作系统中的所有现代文本编辑器都能够在使用\\ n（lf）时正确显示线路结束。 但是，旧版本的 Windows for Windows 将在视觉上挤压这样的线，因为它们只能处理\\ r \\ n（crlf）。</p><p>可选项：</p><ul><li>&quot;lf&quot; – Line Feed only (\\n), common on Linux and macOS as well as inside git repos</li><li>&quot;crlf&quot; - Carriage Return + Line Feed characters (\\r\\n), common on Windows</li><li>&quot;cr&quot; - Carriage Return character only (\\r), used very rarely</li><li>&quot;auto&quot; - Maintain existing line endings (mixed values within one file are normalised by looking at what’s used after the first line)</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">&quot;lf&quot;</td><td style="text-align:center;">--end-of-line &lt;lf/crlf/cr/auto&gt;</td><td style="text-align:center;">endOfLine: &quot;&lt;lf/crlf/cr/auto&gt;&quot;</td></tr></tbody></table><h3 id="_21-embedded-language-formatting" tabindex="-1">21. Embedded Language Formatting <a class="header-anchor" href="#_21-embedded-language-formatting" aria-label="Permalink to &quot;21. Embedded Language Formatting&quot;">​</a></h3><p>控制是否 prettier 格式的引用代码嵌入在文件中。</p><p>可选项：</p><ul><li>&quot;auto&quot; – 如果 prettier 可以自动识别它，格式嵌入式代码。</li><li>&quot;off&quot; - 切勿自动格式化嵌入的代码。</li></ul><table><thead><tr><th style="text-align:center;">Default</th><th style="text-align:center;">CLI Override</th><th style="text-align:center;">API Override</th></tr></thead><tbody><tr><td style="text-align:center;">&quot;auto&quot;</td><td style="text-align:center;">--embedded-language-formatting=off</td><td style="text-align:center;">embeddedLanguageFormatting: &quot;off&quot;</td></tr></tbody></table><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过 npm 包管理工具或开发工具，均能够安装 prettier 插件。在项目文件中，需要创建一个名为 .prettier 的文件用来定义格式，通过对配置参数的设定，就能够快速地实现格式化统一了。</p><br><br><br><p><code>最后，如果您有更好的方法，欢迎在留言区中分享；或者实际操作中遇到什么问题均可留言或者私信我，感谢您的观看！</code> 官方文档：<a href="https://prettier.io/docs/en/index.html" target="_blank" rel="noreferrer">Prettier-docs</a></p>`,124),r=[l];function n(h,o,d,p,u,c){return a(),e("div",null,r)}const y=t(s,[["render",n]]);export{k as __pageData,y as default};
